@startuml
'https://plantuml.com/sequence-diagram

participant ":App" as App
participant ":Storage" as Storage
participant ":Course" as Course
participant ":Session" as Session
participant "dataFile:File" as File
participant ":BufferedReader" as BR
participant ":DataParser" as Parser
participant ":CourseManager" as CM
participant ":SessionManager" as SM

App ->> Storage: load(courses, sessions)
activate Storage

Storage -> Storage: ensureParentDirectoryExists()
activate Storage

Storage -> File: getParentFile()
activate File

File --> Storage: parent : File
deactivate File

opt parent != null && !parent.exists()
    Storage -> File: mkdirs()
    activate File

    File --> Storage: result : boolean
    deactivate File
end

Storage -> File: exists()
activate File
File --> Storage: result : boolean
deactivate File

opt file does not exist
    note right of Storage: No previous storage,\nstarting with new dataset
    Storage --> App
    deactivate Storage
end

Storage -> BR**: new BufferedReader(FileReader(dataFile))
activate BR

Storage -> Storage: loadData(courses, sessions, buffer)
activate Storage


loop while next line is not null
Storage -> BR: readline()
    BR --> Storage: line : String

    alt line starts with "C|"
        Storage -> Parser: parseCourse(line)
        activate Parser

        Parser -> Course**: new Course(courseName)
        activate Course
        Course --> Parser: course : Course
        deactivate Course

        Parser --> Storage: course: Course
        deactivate Parser

        Storage -> CM: add(course)
        activate CM
        CM --> Storage
        deactivate CM

        note right: - Check "C" prefix\n- Ensure 2 segments\n- Name is not null

    else line starts with "S|"

        Storage -> Parser: parseSession(line)
        activate Parser

        Parser -> Course**: new Course(courseName)
        activate Course
        Course --> Parser: course : Course
        deactivate Course

        Parser -> Session**: new Session(course, hours)
        activate Session
        Session --> Parser: session : Session


        Parser --> Storage: session : Session
        deactivate Parser
        Storage -> Session: getCourse()

        Session --> Storage: sessionCourse : Course
        deactivate Session

        note right: - Check "S" prefix\n- Ensure 3 segments\n- Name is not null\n -Hours is type Integer

        loop for Course c : courses

        Storage -> Course: c.getCourseName().equals(sessionCourse.getCourseName())
        activate Course
        Course --> Storage: result : boolean
        deactivate Course

        end

        opt matching course != null
            Storage -> SM: add(matchingCourse, hours)
            activate SM
            SM -> Session**: new Session(course, loggedHours)
            activate Session
            Session --> SM: session : Session
            deactivate Session
            SM --> Storage: session : Session
            deactivate SM
        end

    end
end

Storage --> Storage:
deactivate Storage

Storage -> BR: close()
deactivate BR
Storage --> App
deactivate Storage


@enduml