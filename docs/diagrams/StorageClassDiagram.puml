@startuml

class Storage {
    - dataFile : File
    + Storage(String filepath)
    + void save(CourseManager, SessionManager)
    - void saveData(CourseManager, SessionManager)
}

class Course {
    - courseName : String
    + Course(courseName: String)
    + getCourseName() : String
    + setCourseName(courseName: String) : void
    + toString() : String
    + toStorageString() : String
}

class Session {
    - loggedHours: int
    - date: LocalDate

    + Session(course: Course, loggedHours: int, date: LocalDate)
    + getLoggedHours(): int
    + setLoggedHours(loggedHours: int): void
    + getCourse(): Course
    + getDate(): LocalDate
    + getDateString(): String
    + setDate(date: LocalDate): void
    + toStorageString(): String
    + toString(): String
}

class CourseManager {
    + add(course: Course) : void
    + delete(course: Course) : void
    + getCourses() : ArrayList<Course>
    + findCourse(courseName: String) : Course
    + iterator() : Iterator<Course>
}

class SessionManager {

    + add(course: Course, loggedHours: int, date: LocalDate): void
    + sessionExists(course: Course, loggedHours: int): boolean
    + getAllLoggedHoursForCourse(course: Course): ArrayList<Integer>
    + getAllDateStringsForCourse(course: Course): ArrayList<String>
    + clearAllSessions(): void
    + removeAllSessionsForCourse(course: Course): void
    + getSessionCount(): int
    + getAllSessionsForCourse(course: Course): ArrayList<Session>
    + removeSession(session: Session): boolean
    + removeAllSessionsByDate(date: LocalDate): int
    + iterator(): Iterator<Session>
}


Storage ..> CourseManager : uses
Storage ..> SessionManager : uses
Storage ..> Course : uses toStorageString()
Storage ..> Session : uses toStorageString()

interface Iterable {
    + Iterator iterator()
}
Iterable<|.. CourseManager
Iterable <|.. SessionManager

CourseManager "0..1" --> "*" Course : manages >
SessionManager "0..1" --> "*" Session : manages >

Session "*"-->"1" Course

@enduml